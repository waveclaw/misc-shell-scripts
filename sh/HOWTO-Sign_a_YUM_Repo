#!/bin/sh
############################################################################
# TITLE       : YUM Repo Tool
# PROJECT     : repositories 
# ENGINEER    : waveclaw
# PROGRAM     : repository
# FILE        : HOWTO-Sign_a_YUM_Repo
# CREATED     : 21-DEC-2011
# DESCRIPTION : Sign a YAST Install Source and YUM repo
# ASSUMPTIONS : Familiarity with bash, yum, zypper, rpm and YAST
############################################################################
#                          RELEASE LISCENSE              
#
#       This file is available under copyright 2014. 
#       For internal use only, keep out of young children. 
#                                                                        
#       Other Copyrights to their respective owners.                           
#                                                                        
#  Current version : 0.1
#  Latest version  : 0.1
#  Bugs, Comments  : waveclaw@waveclaw.net
############################################################################

PATH=/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/sbin

TEAM='example.net Packager Team'
RPMS_HOME="/tmp/packages/"
OLD_RPMS_LOCATION="${RPMS_HOME}/RPMS"
NEW_INSTALL_SOURCE="${RPMS_HOME}/suse_yast_install_source"
CURRENT_DATE=`date +%Y%m%d%H%M%S`
ARCHS="i586 x86_64 i686 noarch src"

RING=${RPMS_HOME}/gpg/gpg-yum.keyring
PUBLIC_KEY=${NEW_INSTALL_SOURCE}/gpg-yum-key.asc

make_key() {
### Before hand, secret and public keys were made ###
# Hide the secret key, even though it's only good for 1 year
# Also note that you'll still get failures if you don't import
# the public key
RING=${RPMS_HOME}/gpg/gpg-yum.keyring
SECRING=${RPMS_HOME}/gpg/gpg-secret-yum.keyring
tempfile="/tmp/gpg_script."$$

### This will take a long time to finish if you have an idle system ###
cat >"${tempfile}" <<EOTEMP
# input file to generate GnuPG keys automatically
%echo Generating a standard key
Key-Type: DSA
Key-Length: 1024
Name-Real:  $TEAM
Name-Comment: $YEAR example.net Repository Signing Key
Name-Email: buildteam@example.net
Expire-Date: 10y
%pubring $RING
%secring $SECRING
%commit
%echo done
EOTEMP
gpg --no-default-keyring --gen-key --batch ${tempfile}
gpg --no-default-keyring --keyring ${RING} --list-keys
gpg --no-default-keyring --keyring ${SECRING} -K
gpg --no-default-keyring --keyring ${RING} --export -u buildteam@example.net > $PUBLIC_KEY
# fix $KEYRING and $PUBLIC_KEY
gpg --no-default-keyring --secret-keyring $SECRING --edit-key $PUBLIC_KEY --sign
#  ^^^^ <---- FAILURE TO SIGN THE KEY WILL LEAVE NO PUB KEY TO USE in 2.5.3!!!
}

echo "Warning: this does not sign your individual packages."

echo "0. Check for and create if missing the keypair for signing."
if [ \! -e $RING ]
then
 make_key()
fi

echo "1. Create or clean up any files with checksums."
SUMFILE=${NEW_INSTALL_SOURCE}/suse/setup/descr/MD5SUMS
if [ -f $SUMFILE ]
then
 rm $SUMFILE
fi
mkdir -p ${NEW_INSTALL_SOURCE}/suse/setup/descr/
for DIR in `echo $ARCHS`; do {
  pushd "${NEW_INSTALL_SOURCE}/suse/${DIR}"
  md5sum * >> $SUMFILE
  popd
}; done
MD5_SHA=$(sha1sum ${SUMFILE} | awk '{print $1}')
echo "META SHA1 ${MD5_SHA} MD5SUMS" >> ${NEW_INSTALL_SOURCE}/content
PKG_SHA=$(sha1sum suse/setup/descr/packages | awk '{print $1}')
echo "META SHA1 ${PKG_SHA} packages" >> content
PKG_SHA=$(sha1sum suse/setup/descr/packages.DU | awk '{print $1}')
echo "META SHA1 ${PKG_SHA} packages.DU" >> content
PKG_SHA=$(sha1sum suse/setup/descr/packages.en | awk '{print $1}')
echo "META SHA1 ${PKG_SHA} packages.en" >> content

echo "2. Sign the content metafile and products files."

cp $PUBLIC_KEY ${NEW_INSTALL_SOURCE}/content.key
PKG_SHA=$(sha1sum ${NEW_INSTALL_SOURCE}/content.key | awk '{print $1}')
echo "KEY SHA1 ${PKG_SHA} content.key" >> ${NEW_INSTALL_SOURCE}/content

if [ -f ${NEW_INSTALL_SOURCE}/media.1/products ]
then 
cp ${NEW_INSTALL_SOURCE}/content.key ${NEW_INSTALL_SOURCE}/media.1/products.key
gpg $GPG_OPTS --detach-sign -u "$TEAM" \
        -a ${NEW_INSTALL_SOURCE}/media.1/products
fi

gpg $GPG_OPTS -detach-sign -u "$TEAM" \
        -a ${NEW_INSTALL_SOURCE}/content
cp $PUBLIC_KEY ${NEW_INSTALL_SOURCE}/gpg-pubkey.asc

echo '3. Sign the YUM files'

YUMREPO=${NEW_INSTALL_SOURCE}/RPMS/repodata
if [ -f ${YUMREPO}/repomd.xml ]
then 
  pushd $YUMREPO
  gpg $GPG_OPTS -detach-sign -u "$TEAM" -a repomd.xml
  popd
fi
cp  $PUBLIC_KEY ${YUMREPO}/repomd.xml.key
